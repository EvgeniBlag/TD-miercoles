{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","id","removeTodolist","Delete","addTask","tasks","map","t","key","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","todolistId","todolistTasks","task","changeStatus","find","newTitle","todolist","tl","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","newTodolistId","spacing","allTodolistTasks","tasksForTodolist","item","Paper","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.187efd99.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return(\r\n     <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField variant=\"outlined\"\r\n                        value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3> <EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox\r\n                            checked={t.isDone}\r\n                            color=\"primary\"\r\n                            onChange={onChangeHandler}\r\n                        />\r\n\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler} />\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete />\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React Book\", isDone: true}\r\n        ]\r\n    });\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.title = newTitle;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        // найдём нужный todolist\r\n        const todolist = todolists.find(tl => tl.id === id);\r\n        if (todolist) {\r\n            // если нашёлся - изменим ему заголовок\r\n            todolist.title = title;\r\n            setTodolists([...todolists]);\r\n        }\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        let newTodolistId = v1();\r\n        let newTodolist: TodolistType = {id: newTodolistId, title: title, filter: 'all'};\r\n        setTodolists([newTodolist, ...todolists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodolistId]: []\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n\r\n"],"sourceRoot":""}